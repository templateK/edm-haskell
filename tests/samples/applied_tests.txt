Preprocessing library for emacs-dyn-cabal-0.1.0.0..
Building library for emacs-dyn-cabal-0.1.0.0..
ignoring (possibly broken) abi-depends field for packages
Preprocessing executable 'emacs-dyn-cabal-exe' for emacs-dyn-cabal-0.1.0.0..
Building executable 'emacs-dyn-cabal-exe' for emacs-dyn-cabal-0.1.0.0..
Running emacs-dyn-cabal-exe...
GenericPackageDescription {packageDescription = PackageDescription {specVersionRaw = Right (OrLaterVersion (mkVersion [1,10])), package = PackageIdentifier {pkgName = PackageName "applied-fp-course", pkgVersion = mkVersion [0,1,0,0]}, licenseRaw = Right BSD3, licenseFiles = ["LICENCE"], copyright = "Copyright (C) 2017 Commonwealth Scientific and Industrial Research Organisation (CSIRO)", maintainer = "sean.chalmers@data61.csiro.au", author = "QFPL @ Data61", stability = "", testedWith = [(GHC,ThisVersion (mkVersion [8,4,1])),(GHC,ThisVersion (mkVersion [8,2,2])),(GHC,ThisVersion (mkVersion [8,0,2])),(GHC,ThisVersion (mkVersion [7,10,3]))], homepage = "", pkgUrl = "", bugReports = "", sourceRepos = [SourceRepo {repoKind = RepoHead, repoType = Just Git, repoLocation = Just "https://github.com/qfpl/applied-fp-course", repoModule = Nothing, repoBranch = Nothing, repoTag = Nothing, repoSubdir = Nothing}], synopsis = "Simplest of web apps for educational purposes.", description = "Haskell course for people looking to start building larger applications.", category = "Education", customFieldsPD = [], buildDepends = [], buildTypeRaw = Just Simple, setupBuildInfo = Nothing, library = Nothing, subLibraries = [], executables = [], foreignLibs = [], testSuites = [], benchmarks = [], dataFiles = [], dataDir = "", extraSrcFiles = ["changelog.md"], extraTmpFiles = [], extraDocFiles = []}, genPackageFlags = [],




condLibrary = Just (CondNode {condTreeData = Library {libName = Nothing, exposedModules = [ModuleName ["Level01","Core"],ModuleName ["Level02","Core"],ModuleName ["Level02","Types"],ModuleName ["Level03","Core"],ModuleName ["Level03","Types"],ModuleName ["Level04","Conf"],ModuleName ["Level04","DB"],ModuleName ["Level04","DB","Types"],ModuleName ["Level04","Core"],ModuleName ["Level04","Types"],ModuleName ["Level04","Types","CommentText"],ModuleName ["Level04","Types","Error"],ModuleName ["Level04","Types","Topic"],ModuleName ["Level05","AppM"],ModuleName ["Level05","Conf"],ModuleName ["Level05","DB"],ModuleName ["Level05","DB","Types"],ModuleName ["Level05","Core"],ModuleName ["Level05","Types"],ModuleName ["Level05","Types","CommentText"],ModuleName ["Level05","Types","Error"],ModuleName ["Level05","Types","Topic"],ModuleName ["Level06","AppM"],ModuleName ["Level06","Conf"],ModuleName ["Level06","Conf","CommandLine"],ModuleName ["Level06","Conf","File"],ModuleName ["Level06","DB"],ModuleName ["Level06","DB","Types"],ModuleName ["Level06","Core"],ModuleName ["Level06","Types"],ModuleName ["Level06","Types","CommentText"],ModuleName ["Level06","Types","Error"],ModuleName ["Level06","Types","Topic"],ModuleName ["Level07","AppM"],ModuleName ["Level07","Conf"],ModuleName ["Level07","Conf","CommandLine"],ModuleName ["Level07","Conf","File"],ModuleName ["Level07","DB"],ModuleName ["Level07","DB","Types"],ModuleName ["Level07","Core"],ModuleName ["Level07","Responses"],ModuleName ["Level07","Types"],ModuleName ["Level07","Types","CommentText"],ModuleName ["Level07","Types","Error"],ModuleName ["Level07","Types","Topic"]], reexportedModules = [], signatures = [], libExposed = True, libBuildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["src"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [(GHC,["-Wall","-fno-warn-unused-binds","-fno-warn-unused-do-bind","-fno-warn-unused-imports","-fno-warn-type-defaults","-ferror-spans"])], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "wai") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "warp") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "http-types") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,9])) (EarlierVersion (mkVersion [0,13]))),Dependency (PackageName "bytestring") (WildcardVersion (mkVersion [0,10])),Dependency (PackageName "text") (WildcardVersion (mkVersion [1,2])),Dependency (PackageName "optparse-applicative") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,13])) (EarlierVersion (mkVersion [0,15]))),Dependency (PackageName "aeson") (WildcardVersion (mkVersion [1])),Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2])),Dependency (PackageName "time") (IntersectVersionRanges (OrLaterVersion (mkVersion [1,4])) (EarlierVersion (mkVersion [1,10]))),Dependency (PackageName "sqlite-simple") (WildcardVersion (mkVersion [0,4])),Dependency (PackageName "sqlite-simple-errors") (WildcardVersion (mkVersion [0,6])),Dependency (PackageName "semigroups") (WildcardVersion (mkVersion [0,18])),Dependency (PackageName "transformers") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,4])) (EarlierVersion (mkVersion [0,6])))], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "wai") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "warp") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "http-types") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,9])) (EarlierVersion (mkVersion [0,13]))),Dependency (PackageName "bytestring") (WildcardVersion (mkVersion [0,10])),Dependency (PackageName "text") (WildcardVersion (mkVersion [1,2])),Dependency (PackageName "optparse-applicative") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,13])) (EarlierVersion (mkVersion [0,15]))),Dependency (PackageName "aeson") (WildcardVersion (mkVersion [1])),Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2])),Dependency (PackageName "time") (IntersectVersionRanges (OrLaterVersion (mkVersion [1,4])) (EarlierVersion (mkVersion [1,10]))),Dependency (PackageName "sqlite-simple") (WildcardVersion (mkVersion [0,4])),Dependency (PackageName "sqlite-simple-errors") (WildcardVersion (mkVersion [0,6])),Dependency (PackageName "semigroups") (WildcardVersion (mkVersion [0,18])),Dependency (PackageName "transformers") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,4])) (EarlierVersion (mkVersion [0,6])))], condTreeComponents = []}), condSubLibraries = [], condForeignLibs = [],




condExecutables = [(UnqualComponentName "level01-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level01-exe", modulePath = "Level01.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level02-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level02-exe", modulePath = "Level02.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level03-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level03-exe", modulePath = "Level03.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level04-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level04-exe", modulePath = "Level04.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level05-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level05-exe", modulePath = "Level05.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level06-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level06-exe", modulePath = "Level06.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []}),(UnqualComponentName "level07-exe",CondNode {condTreeData = Executable {exeName = UnqualComponentName "level07-exe", modulePath = "Level07.hs", exeScope = ExecutablePublic, buildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["exe"], otherModules = [], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion], condTreeComponents = []})],





condTestSuites = [(UnqualComponentName "app-fp-tests",

CondNode {condTreeData = TestSuite {testName = UnqualComponentName "", testInterface = TestSuiteExeV10 (mkVersion [1,0]) "Test.hs", testBuildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["tests"], otherModules = [ModuleName ["Level03Tests"],ModuleName ["Level04Tests"],ModuleName ["Level05Tests"],ModuleName ["Level06Tests"],ModuleName ["Level07Tests"]], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion,Dependency (PackageName "wai") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "wai-extra") (WildcardVersion (mkVersion [3,0])),Dependency (PackageName "hspec") (IntersectVersionRanges (OrLaterVersion (mkVersion [2,2])) (EarlierVersion (mkVersion [3,0]))),Dependency (PackageName "hspec-wai") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,6])) (EarlierVersion (mkVersion [0,10]))),Dependency (PackageName "bytestring") (WildcardVersion (mkVersion [0,10])),Dependency (PackageName "text") (WildcardVersion (mkVersion [1,2])),Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2]))], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion,Dependency (PackageName "wai") (WildcardVersion (mkVersion [3,2])),Dependency (PackageName "wai-extra") (WildcardVersion (mkVersion [3,0])),Dependency (PackageName "hspec") (IntersectVersionRanges (OrLaterVersion (mkVersion [2,2])) (EarlierVersion (mkVersion [3,0]))),Dependency (PackageName "hspec-wai") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,6])) (EarlierVersion (mkVersion [0,10]))),Dependency (PackageName "bytestring") (WildcardVersion (mkVersion [0,10])),Dependency (PackageName "text") (WildcardVersion (mkVersion [1,2])),Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2]))], condTreeComponents = []}),(UnqualComponentName "doctests",



CondNode {condTreeData = TestSuite {testName = UnqualComponentName "", testInterface = TestSuiteExeV10 (mkVersion [1,0]) "doctests.hs", testBuildInfo = BuildInfo {buildable = True, buildTools = [], buildToolDepends = [], cppOptions = [], asmOptions = [], cmmOptions = [], ccOptions = [], cxxOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], extraFrameworkDirs = [], asmSources = [], cmmSources = [], cSources = [], cxxSources = [], jsSources = [], hsSourceDirs = ["tests"], otherModules = [ModuleName ["Level04Tests"],ModuleName ["Level05Tests"],ModuleName ["Level06Tests"],ModuleName ["Level07Tests"]], virtualModules = [], autogenModules = [], defaultLanguage = Just Haskell2010, otherLanguages = [], defaultExtensions = [], otherExtensions = [], oldExtensions = [], extraLibs = [], extraGHCiLibs = [], extraBundledLibs = [], extraLibFlavours = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [(GHC,["-threaded"])], profOptions = [], sharedOptions = [], staticOptions = [], customFieldsBI = [], targetBuildDepends = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion,Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2])),Dependency (PackageName "hspec") (IntersectVersionRanges (OrLaterVersion (mkVersion [2,2])) (EarlierVersion (mkVersion [3,0]))),Dependency (PackageName "hspec-wai") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,6])) (EarlierVersion (mkVersion [0,10]))),Dependency (PackageName "doctest") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,11])) (EarlierVersion (mkVersion [0,16])))], mixins = []}}, condTreeConstraints = [Dependency (PackageName "base") (IntersectVersionRanges (OrLaterVersion (mkVersion [4,8])) (EarlierVersion (mkVersion [4,12]))),Dependency (PackageName "applied-fp-course") AnyVersion,Dependency (PackageName "mtl") (WildcardVersion (mkVersion [2,2])),Dependency (PackageName "hspec") (IntersectVersionRanges (OrLaterVersion (mkVersion [2,2])) (EarlierVersion (mkVersion [3,0]))),Dependency (PackageName "hspec-wai") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,6])) (EarlierVersion (mkVersion [0,10]))),Dependency (PackageName "doctest") (IntersectVersionRanges (OrLaterVersion (mkVersion [0,11])) (EarlierVersion (mkVersion [0,16])))], condTreeComponents = []})],

condBenchmarks = []}
""
